name: Functional tests

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        description: "Python version"
        type: string
        default: "3.10"
      tox-version:
        required: false
        description: "Tox version, which should be used, e.g. `<4`"
        type: string
        default: ""
      working-directory:
        required: false
        description: "To change working directory"
        type: string
        default: "."
      timeout-minutes:
        required: false
        description: "Configurable timeout limit for functional test job"
        type: number
        default: 60
      snapcraft:
        required: false
        description: "Flag if snap is tested."
        type: boolean
        default: false
      commands:
        required: false
        description: |
          Command to run functional test in strategies. It defaults to
          `make functional`, but is defined as a list, so `['make functional']`.
          This allows you to run multiple tests with different parameters.
          Examples:
          - ['FUNC_ARGS="--series jammy" make functional',
             'FUNC_ARGS="--series focal" make functional']
          - ['tox -e func -- -sv --series jammy', 'tox -e func -- -sv --series focal']
        type: string
        default: "['make functional']"
      # actions-operator
      provider:
        required: false
        type: string
        default: "lxd"
      nested-containers:
        required: false
        type: boolean
        default: false
      ignore-changes:
        required: false
        type: string
        description: |
          Directories and files to ignore when checking changes to determine whether functional
          tests should be skipped. This is an optional input field and it accepts a regex string.
          The paths should be relative to the repo's root directory.
          Examples:
          - "^(README.md|doc/|tests/unit/)"
        default: "^$"

jobs:
  func:
    name: Functional tests
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    strategy:
      fail-fast: true
      matrix:
        command: ${{ fromJson(inputs.commands) }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Check whether to skip the functional test
        id: check-func-skip
        if: github.event.review.body != 'recheck'
        uses: canonical/bootstack-actions/.github/actions/check-skip@main
        with:
          ignore-changes: ${{ inputs.ignore-changes }}
          check-func-skip: true
      - name: Setup Python
        if: |
          github.event.review.body == 'recheck'
          || steps.check-func-skip.outputs.skip-func-tests == 0
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install tox
        if: |
          github.event.review.body == 'recheck'
          || steps.check-func-skip.outputs.skip-func-tests == 0
        run: |
          python -m pip install --upgrade pip
          python -m pip install "tox${{ inputs.tox-version }}"
      - name: Setup Juju environment
        if: |
          github.event.review.body == 'recheck'
          || steps.check-func-skip.outputs.skip-func-tests == 0
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: ${{ inputs.provider }}
      - name: Remove tox install by actions-operator
        if: |
          github.event.review.body == 'recheck'
          || steps.check-func-skip.outputs.skip-func-tests == 0
        run: sudo apt remove tox -y
      - name: Install snapcraft
        if: |
          inputs.snapcraft &&
          (github.event.review.body == 'recheck' || steps.check-func-skip.outputs.skip-func-tests == 0)
        run: sudo snap install snapcraft --classic
      - name: Enabled nested LXD containers
        if: |
          inputs.provider == 'lxd'
          && inputs.nested-containers
          && (github.event.review.body == 'recheck' || steps.check-func-skip.outputs.skip-func-tests == 0)
        run: |
          # create new lxd project and configure nesting & privileged
          lxc profile show default > default-lxc-profile.yaml
          lxc project create nested-lxd
          lxc profile edit --project nested-lxd default < default-lxc-profile.yaml
          lxc profile set --project nested-lxd default security.nesting=true
          lxc profile set --project nested-lxd default security.privileged=true
          # set default project to be nested-lxd project
          juju model-default project=nested-lx
      - name: Run tests with `${{ matrix.command }}`
        if: |
          github.event.review.body == 'recheck'
          || steps.check-func-skip.outputs.skip-func-tests == 0
        working-directory: ${{ inputs.working-directory }}
        run: ${{ matrix.command }}
